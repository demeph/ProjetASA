/*
 * generated by Xtext 2.15.0
 */
package fr.univnantes.asa.xtext.serializer;

import com.google.inject.Inject;
import cosa.Attachement;
import cosa.Binding;
import cosa.Component;
import cosa.CompositeConfiguration;
import cosa.Configuration;
import cosa.Connector;
import cosa.CosaPackage;
import cosa.Port;
import cosa.ProvidedPort;
import cosa.ProvidedRole;
import cosa.ProvidedService;
import cosa.RequiredPort;
import cosa.RequiredRole;
import cosa.RequiredService;
import cosa.Role;
import cosa.Service;
import cosa.SimpleConfiguration;
import fr.univnantes.asa.xtext.services.CosaDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CosaDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CosaDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CosaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CosaPackage.ATTACHEMENT:
				sequence_Attachement(context, (Attachement) semanticObject); 
				return; 
			case CosaPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case CosaPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case CosaPackage.COMPOSITE_CONFIGURATION:
				sequence_CompositeConfiguration(context, (CompositeConfiguration) semanticObject); 
				return; 
			case CosaPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case CosaPackage.CONNECTOR:
				sequence_Connector(context, (Connector) semanticObject); 
				return; 
			case CosaPackage.PORT:
				sequence_Port_Impl(context, (Port) semanticObject); 
				return; 
			case CosaPackage.PROVIDED_PORT:
				sequence_ProvidedPort(context, (ProvidedPort) semanticObject); 
				return; 
			case CosaPackage.PROVIDED_ROLE:
				sequence_ProvidedRole(context, (ProvidedRole) semanticObject); 
				return; 
			case CosaPackage.PROVIDED_SERVICE:
				sequence_ProvidedService(context, (ProvidedService) semanticObject); 
				return; 
			case CosaPackage.REQUIRED_PORT:
				sequence_RequiredPort(context, (RequiredPort) semanticObject); 
				return; 
			case CosaPackage.REQUIRED_ROLE:
				sequence_RequiredRole(context, (RequiredRole) semanticObject); 
				return; 
			case CosaPackage.REQUIRED_SERVICE:
				sequence_RequiredService(context, (RequiredService) semanticObject); 
				return; 
			case CosaPackage.ROLE:
				sequence_Role_Impl(context, (Role) semanticObject); 
				return; 
			case CosaPackage.SERVICE:
				sequence_Service_Impl(context, (Service) semanticObject); 
				return; 
			case CosaPackage.SIMPLE_CONFIGURATION:
				sequence_SimpleConfiguration(context, (SimpleConfiguration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attachement returns Attachement
	 *
	 * Constraint:
	 *     (role=Role port=Port)
	 */
	protected void sequence_Attachement(ISerializationContext context, Attachement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.ATTACHEMENT__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.ATTACHEMENT__ROLE));
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.ATTACHEMENT__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.ATTACHEMENT__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttachementAccess().getRoleRoleParserRuleCall_2_0(), semanticObject.getRole());
		feeder.accept(grammarAccess.getAttachementAccess().getPortPortParserRuleCall_4_0(), semanticObject.getPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     (portProvided=Port portRequired=Port)
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.BINDING__PORT_PROVIDED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.BINDING__PORT_PROVIDED));
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.BINDING__PORT_REQUIRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.BINDING__PORT_REQUIRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingAccess().getPortProvidedPortParserRuleCall_2_0(), semanticObject.getPortProvided());
		feeder.accept(grammarAccess.getBindingAccess().getPortRequiredPortParserRuleCall_3_0(), semanticObject.getPortRequired());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=EString ports+=Port ports+=Port* services+=Service services+=Service*)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompositeConfiguration returns CompositeConfiguration
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         components+=Component 
	 *         components+=Component* 
	 *         connectors+=Connector 
	 *         connectors+=Connector* 
	 *         ports+=Port 
	 *         ports+=Port* 
	 *         (bindings+=Binding bindings+=Binding*)* 
	 *         attachements+=Attachement 
	 *         attachements+=Attachement* 
	 *         (configurations+=Configuration configurations+=Configuration*)*
	 *     )
	 */
	protected void sequence_CompositeConfiguration(ISerializationContext context, CompositeConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         components+=Component 
	 *         components+=Component* 
	 *         connectors+=Connector 
	 *         connectors+=Connector* 
	 *         ports+=Port 
	 *         ports+=Port* 
	 *         (bindings+=Binding bindings+=Binding*)* 
	 *         attachements+=Attachement 
	 *         attachements+=Attachement*
	 *     )
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     (name=EString roles+=Role roles+=Role)
	 */
	protected void sequence_Connector(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Port returns Port
	 *     Port_Impl returns Port
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Port_Impl(ISerializationContext context, Port semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPort_ImplAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Port returns ProvidedPort
	 *     ProvidedPort returns ProvidedPort
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_ProvidedPort(ISerializationContext context, ProvidedPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProvidedPortAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Role returns ProvidedRole
	 *     ProvidedRole returns ProvidedRole
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_ProvidedRole(ISerializationContext context, ProvidedRole semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProvidedRoleAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Service returns ProvidedService
	 *     ProvidedService returns ProvidedService
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_ProvidedService(ISerializationContext context, ProvidedService semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProvidedServiceAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Port returns RequiredPort
	 *     RequiredPort returns RequiredPort
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_RequiredPort(ISerializationContext context, RequiredPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequiredPortAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Role returns RequiredRole
	 *     RequiredRole returns RequiredRole
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_RequiredRole(ISerializationContext context, RequiredRole semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequiredRoleAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Service returns RequiredService
	 *     RequiredService returns RequiredService
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_RequiredService(ISerializationContext context, RequiredService semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequiredServiceAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Role returns Role
	 *     Role_Impl returns Role
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Role_Impl(ISerializationContext context, Role semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRole_ImplAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *     Service_Impl returns Service
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Service_Impl(ISerializationContext context, Service semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CosaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getService_ImplAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleConfiguration returns SimpleConfiguration
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         components+=Component 
	 *         components+=Component* 
	 *         connectors+=Connector 
	 *         connectors+=Connector* 
	 *         ports+=Port 
	 *         ports+=Port* 
	 *         (bindings+=Binding bindings+=Binding*)* 
	 *         attachements+=Attachement 
	 *         attachements+=Attachement*
	 *     )
	 */
	protected void sequence_SimpleConfiguration(ISerializationContext context, SimpleConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
