/**
 * generated by Xtext 2.15.0
 */
package fr.univnantes.asa.xtext.formatting2;

import com.google.inject.Inject;
import fr.univnantes.asa.cosa.Attachement;
import fr.univnantes.asa.cosa.Binding;
import fr.univnantes.asa.cosa.Component;
import fr.univnantes.asa.cosa.CompositeConfiguration;
import fr.univnantes.asa.cosa.Configuration;
import fr.univnantes.asa.cosa.Connector;
import fr.univnantes.asa.cosa.Port;
import fr.univnantes.asa.cosa.Service;
import fr.univnantes.asa.xtext.services.CosaDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class CosaDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CosaDslGrammarAccess _cosaDslGrammarAccess;
  
  protected void _format(final CompositeConfiguration compositeConfiguration, @Extension final IFormattableDocument document) {
    EList<Component> _components = compositeConfiguration.getComponents();
    for (final Component component : _components) {
      document.<Component>format(component);
    }
    EList<Connector> _connectors = compositeConfiguration.getConnectors();
    for (final Connector connector : _connectors) {
      document.<Connector>format(connector);
    }
    EList<Port> _ports = compositeConfiguration.getPorts();
    for (final Port port : _ports) {
      document.<Port>format(port);
    }
    EList<Binding> _bindings = compositeConfiguration.getBindings();
    for (final Binding binding : _bindings) {
      document.<Binding>format(binding);
    }
    EList<Attachement> _attachements = compositeConfiguration.getAttachements();
    for (final Attachement attachement : _attachements) {
      document.<Attachement>format(attachement);
    }
    EList<Configuration> _configurations = compositeConfiguration.getConfigurations();
    for (final Configuration configuration : _configurations) {
      document.<Configuration>format(configuration);
    }
  }
  
  protected void _format(final Component component, @Extension final IFormattableDocument document) {
    EList<Port> _ports = component.getPorts();
    for (final Port port : _ports) {
      document.<Port>format(port);
    }
    EList<Service> _services = component.getServices();
    for (final Service service : _services) {
      document.<Service>format(service);
    }
  }
  
  public void format(final Object compositeConfiguration, final IFormattableDocument document) {
    if (compositeConfiguration instanceof CompositeConfiguration) {
      _format((CompositeConfiguration)compositeConfiguration, document);
      return;
    } else if (compositeConfiguration instanceof XtextResource) {
      _format((XtextResource)compositeConfiguration, document);
      return;
    } else if (compositeConfiguration instanceof Component) {
      _format((Component)compositeConfiguration, document);
      return;
    } else if (compositeConfiguration instanceof EObject) {
      _format((EObject)compositeConfiguration, document);
      return;
    } else if (compositeConfiguration == null) {
      _format((Void)null, document);
      return;
    } else if (compositeConfiguration != null) {
      _format(compositeConfiguration, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(compositeConfiguration, document).toString());
    }
  }
}
