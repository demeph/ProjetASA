/**
 * generated by Xtext 2.15.0
 */
package fr.univnantes.asa.xtext.formatting2;

import com.google.inject.Inject;
import cosa.Attachement;
import cosa.Binding;
import cosa.Component;
import cosa.Configuration;
import cosa.Connector;
import cosa.Port;
import cosa.Service;
import fr.univnantes.asa.xtext.services.CosaDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class CosaDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CosaDslGrammarAccess _cosaDslGrammarAccess;
  
  protected void _format(final Configuration configuration, @Extension final IFormattableDocument document) {
    EList<Component> _components = configuration.getComponents();
    for (final Component component : _components) {
      document.<Component>format(component);
    }
    EList<Connector> _connectors = configuration.getConnectors();
    for (final Connector connector : _connectors) {
      document.<Connector>format(connector);
    }
    EList<Port> _ports = configuration.getPorts();
    for (final Port port : _ports) {
      document.<Port>format(port);
    }
    EList<Binding> _bindings = configuration.getBindings();
    for (final Binding binding : _bindings) {
      document.<Binding>format(binding);
    }
    EList<Attachement> _attachements = configuration.getAttachements();
    for (final Attachement attachement : _attachements) {
      document.<Attachement>format(attachement);
    }
  }
  
  protected void _format(final Component component, @Extension final IFormattableDocument document) {
    EList<Port> _ports = component.getPorts();
    for (final Port port : _ports) {
      document.<Port>format(port);
    }
    EList<Service> _services = component.getServices();
    for (final Service service : _services) {
      document.<Service>format(service);
    }
  }
  
  public void format(final Object component, final IFormattableDocument document) {
    if (component instanceof XtextResource) {
      _format((XtextResource)component, document);
      return;
    } else if (component instanceof Component) {
      _format((Component)component, document);
      return;
    } else if (component instanceof Configuration) {
      _format((Configuration)component, document);
      return;
    } else if (component instanceof EObject) {
      _format((EObject)component, document);
      return;
    } else if (component == null) {
      _format((Void)null, document);
      return;
    } else if (component != null) {
      _format(component, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(component, document).toString());
    }
  }
}
